====================
Multistage DockerFile
====================
FROM maven:3.8.5-openjdk-11-jre-slim as build
WORKDIR /app
COPY ..
RUN mvn clean package

FROM openjdk:11-jre-slim as runtime
WORKDIR /app
COPY --from=build/target/app/*.jar app.jar
EXPOSE 8080
CMD["java","-jar","app.jar"]

=================
IMP Docker Theory
=================
Docker 0 ip 172.17.0.1

***TO RUN 10 CONTAINER AT A TIME*** 
for I in {1..10}; do
docker run -d nginx:latest
done

**TO STOP ALLCONTAINER IN SINGLE TIME**
docker stop $(docker ps -aq)

**CONTAINER APP DATA STORED IN THIS FOLDER**
cd /var/lib/docker/container

** AFTER CREATINON OF VOLUME CREATE FILE SYSTEM AND PARTITION OF VOLUME **
lsblk
fdisk /dev/xvdf
mkfs.ext4 /dev/xvdf1

UUID=ccef6824-56ee-4f80-b047-0a4b5547deb0

==============
docker volume create mongo
docker run --rm -d --name app1 -v mongo/data/db mongo:latest
To enable the conainer to do docker ps when we are inside conatiner ( DOCKER SOCK IS NOT THERE BECAUSE ITS IN ETWEEN DOCKER CLIENT AND DOCKER HOST WHICH ACTUALLY HELP US TO 
RUN THE COMMANDS LIKE IN THIS WAY DOCKER KNOWN TO EXECUTE DOCKER PS ON DOCKER ) 
docker run --rm -d --name app1 -v /var/run/docker.sock:/var/run/docker.sock --network none kiran2361993/troubleshootingtools:v1-d --name app1 -v 
==============
ARG should be passed defore building the container --build-arg T_VERSION='1.8.0'
and ENV can e passed after running the conatiner   -e AWS_ACCESS_KEY=hidden 

Daggling images =  means the images which is overwritten and not tag and name is given that images
docker system prun will remove network which not used by at least one container , stopped containers, daggling images, unused build cashes
==============
FROM maven:3.8.5-openjdk-11-jre-slim 
RUN mkdir /app
RUN groupadd adduser && useradd -r -g appuser appuser
RUN adduser
WORKDIR /app
COPY ..
RUN mvn clean package
EXPOSE 8080
CMD["java","-jar","target/app.jar"]

groupadd appuser → Creates a new group named appuser.
useradd -r -g appuser appuser → Creates a system user named appuser and assigns it to the appuser group.
-r → Creates a system user (without a home directory and login shell).
-g appuser → Assigns the user to the appuser group.

==============
# Use a lightweight Maven image with JDK 11
FROM maven:3.8.5-openjdk-11-slim AS build

# Set working directory
WORKDIR /app

# Copy only required files
COPY pom.xml .
COPY src ./src

# Build the application (avoid using root privileges)
RUN mvn clean package

# Use a lightweight JRE base image for production
FROM openjdk:11-jre-slim

# Create a non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy built JAR file from build stage
COPY --from=build /app/target/app.jar app.jar

# Set ownership & permissions
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose application port
EXPOSE 8080

# Define the startup command
CMD ["java", "-jar", "app.jar"]

===============
